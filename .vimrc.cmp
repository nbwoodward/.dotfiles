
" If we're using CMP we should keep our column on the left open for linting
" (prevents jump)
" set signcolumn=yes

" Limit size of autocomplete box
" set pumheight=5

lua <<EOF

  vim.opt.signcolumn = "yes"
  vim.opt.pumheight = 5

  -- Set up nvim-cmp.
  local cmp = require('cmp')


  local ELLIPSIS_CHAR = 'â€¦'
  local MAX_LABEL_WIDTH = 35
  local MAX_KIND_WIDTH = 14

  local get_ws = function (max, len)
    return (" "):rep(max - len)
  end

  local format = function(_, item)
    local content = item.abbr
    -- local kind_symbol = symbols[item.kind]
    -- item.kind = kind_symbol .. get_ws(MAX_KIND_WIDTH, #kind_symbol)

    if #content > MAX_LABEL_WIDTH then
      item.abbr = vim.fn.strcharpart(content, 0, MAX_LABEL_WIDTH) .. ELLIPSIS_CHAR
    else
      item.abbr = content .. get_ws(MAX_LABEL_WIDTH, #content)
    end

    return item
  end

  enabled = function()
    local buftype = vim.bo.buftype

    if buftype == 'prompt' or buftype == 'nofile' then
      return false
    end

    return true
  end

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
      end,
    },
    window = {
      completion = cmp.config.window.bordered(),
      documentation = cmp.config.window.bordered(),
    },
    formatting = {
      format = format,
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-j>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<C-k>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<Tab>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<S-Tab>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = false }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = "copilot", group_index = 2 },
      { name = 'nvim_lsp', group_index = 2 },
      { name = 'vsnip', group_index = 2 },
    }, {
      { name = 'buffer'},
    })
  })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    }),
    matching = { disallow_symbol_nonprefix_matching = false }
  })

  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  require('lspconfig')['gopls'].setup {
    capabilities = capabilities
  }
  require('lspconfig')['ts_ls'].setup{
    capabilities = capabilities
  }



  -- Set up Copilot
  require("copilot").setup({
    suggestion = { enabled = false },
    panel = { enabled = false },
  })

  require("copilot_cmp").setup()
EOF
